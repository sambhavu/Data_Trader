#include <cmath>
#include <vector>
#include <iostream>
#include <string>
using namespace std; 

const double EURUSD[499] = {
1.1163, 
1.1163, 
1.1164, 
1.1164, 
1.1163, 
1.1161, 
1.1162, 
1.1161, 
1.1162, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1162, 
1.1163, 
1.1163, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1164, 
1.1163, 
1.1162, 
1.1162, 
1.1164, 
1.1166, 
1.1164, 
1.1165, 
1.1166, 
1.1166, 
1.1166, 
1.1167, 
1.1167, 
1.1168, 
1.1168, 
1.1168, 
1.1168, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1169, 
1.1168, 
1.1168, 
1.1168, 
1.1168, 
1.1168, 
1.1168, 
1.1167, 
1.1168, 
1.1169, 
1.1171, 
1.1171, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1173, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1173, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1171, 
1.1171, 
1.1170, 
1.1171, 
1.1171, 
1.1171, 
1.1171, 
1.1170, 
1.1170, 
1.1170, 
1.1170, 
1.1170, 
1.1170, 
1.1170, 
1.1171, 
1.1171, 
1.1171, 
1.1171, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1171, 
1.1171, 
1.1171, 
1.1171, 
1.1172, 
1.1173, 
1.1173, 
1.1173, 
1.1174, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1171, 
1.1172, 
1.1172, 
1.1171, 
1.1171, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1171, 
1.1172, 
1.1172, 
1.1172, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1172, 
1.1171, 
1.1171, 
1.1171, 
1.1172, 
1.1173, 
1.1173, 
1.1172, 
1.1172, 
1.1172, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1174, 
1.1174, 
1.1174, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1173, 
1.1174, 
1.1173, 
1.1173, 
1.1173, 
1.1174, 
1.1174, 
1.1173, 
1.1173, 
1.1176, 
1.1174, 
1.1175, 
1.1175, 
1.1176, 
1.1176, 
1.1176, 
1.1177, 
1.1178, 
1.1178, 
1.1179, 
1.1179, 
1.1178, 
1.1178, 
1.1177, 
1.1177, 
1.1178, 
1.1178, 
1.1178, 
1.1178, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1178, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1180, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1180, 
1.1181, 
1.1181, 
1.1180, 
1.1180, 
1.1180, 
1.1180, 
1.1180, 
1.1181, 
1.1181, 
1.1181, 
1.1181, 
1.1180, 
1.1180, 
1.1180, 
1.1180, 
1.1178, 
1.1179, 
1.1179, 
1.1178, 
1.1178, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1179, 
1.1178, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1176, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1176, 
1.1176, 
1.1176, 
1.1176, 
1.1178, 
1.1178, 
1.1179, 
1.1179, 
1.1178, 
1.1179, 
1.1180, 
1.1179, 
1.1180, 
1.1179, 
1.1180, 
1.1182, 
1.1182, 
1.1183, 
1.1185, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1184, 
1.1184, 
1.1182, 
1.1184, 
1.1183, 
1.1183, 
1.1183, 
1.1182, 
1.1183, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1185, 
1.1184, 
1.1185, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1185, 
1.1184, 
1.1185, 
1.1184, 
1.1184, 
1.1184, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1184, 
1.1184, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1186, 
1.1185, 
1.1186, 
1.1185, 
1.1186, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1185, 
1.1186, 
1.1187, 
1.1187, 
1.1187, 
1.1187, 
1.1187, 
1.1187, 
1.1186, 
1.1186, 
1.1186, 
1.1187, 
1.1187, 
1.1187, 
1.1187, 
1.1188, 
1.1188, 
1.1188, 
1.1188, 
1.1189, 
1.1189, 
1.1188, 
1.1188, 
1.1188, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1189, 
1.1188, 
1.1188, 
1.1188, 
1.1188, 
1.1187, 
1.1186, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1184, 
1.1185, 
1.1184, 
1.1184, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1186, 
1.1186, 
1.1186, 
1.1186, 
1.1186, 
1.1186, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1185, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1184, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1182, 
1.1182, 
1.1182, 
1.1182, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1183, 
1.1182, 
1.1182, 
1.1181, 
1.1181, 
1.1181, 
1.1181, 
1.1181, 
1.1181, 
1.1180, 
1.1180, 
1.1179, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1176, 
1.1176, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1177, 
1.1178, 
1.1178, 
1.1178, 
1.1178, 
1.1179, 
1.1178, 
1.1178};

class FX{
    public: 
   void MA_trader(); 
};


void FX:: MA_trader(){
    
    double sum = 0; 
    double MA15; 
    double profit = 0;
    double sumprofit = 0;
    
    for(int i = 0; i<499; i++){
        
        if(i>15){
            profit = 0;
            sum = 0;
            double count =0;
            for(int j = i-15;j<i;j++){
                
                sum += EURUSD[j];
                count++;
            }
            
            MA15 = sum/count;
            
            if(EURUSD[i-1]>MA15){           //bullish trend
                profit = EURUSD[i]-EURUSD[i-1];   
            }
            
            if(EURUSD[i-1]<MA15){            //bearish trend
                profit = EURUSD[i-1]-EURUSD[i];    
            }
            sumprofit += profit;
            cout<<sumprofit<<"\n";
    }
    }
}

int main()
{
FX algo; 
algo.MA_trader();
return 0;  
}
